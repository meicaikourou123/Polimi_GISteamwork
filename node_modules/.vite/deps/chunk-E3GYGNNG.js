import {
  init_dom,
  removeNode
} from "./chunk-4VUZO27F.js";
import {
  Object_default,
  VOID,
  init_Object,
  init_events,
  init_functions,
  listen,
  unlistenByKey
} from "./chunk-PUPPPCLM.js";
import {
  __esm,
  __export
} from "./chunk-J43GMYXM.js";

// node_modules/ol/MapEventType.js
var MapEventType_default;
var init_MapEventType = __esm({
  "node_modules/ol/MapEventType.js"() {
    MapEventType_default = {
      POSTRENDER: "postrender",
      MOVESTART: "movestart",
      MOVEEND: "moveend",
      LOADSTART: "loadstart",
      LOADEND: "loadend"
    };
  }
});

// node_modules/ol/control/Control.js
var Control_exports = {};
__export(Control_exports, {
  default: () => Control_default
});
var Control, Control_default;
var init_Control = __esm({
  "node_modules/ol/control/Control.js"() {
    init_Object();
    init_MapEventType();
    init_functions();
    init_events();
    init_dom();
    Control = class extends Object_default {
      constructor(options) {
        super();
        const element = options.element;
        if (element && !options.target && !element.style.pointerEvents) {
          element.style.pointerEvents = "auto";
        }
        this.element = element ? element : null;
        this.target_ = null;
        this.map_ = null;
        this.listenerKeys = [];
        if (options.render) {
          this.render = options.render;
        }
        if (options.target) {
          this.setTarget(options.target);
        }
      }
      disposeInternal() {
        removeNode(this.element);
        super.disposeInternal();
      }
      getMap() {
        return this.map_;
      }
      setMap(map) {
        if (this.map_) {
          removeNode(this.element);
        }
        for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
          unlistenByKey(this.listenerKeys[i]);
        }
        this.listenerKeys.length = 0;
        this.map_ = map;
        if (map) {
          const target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();
          target.appendChild(this.element);
          if (this.render !== VOID) {
            this.listenerKeys.push(
              listen(map, MapEventType_default.POSTRENDER, this.render, this)
            );
          }
          map.render();
        }
      }
      render(mapEvent) {
      }
      setTarget(target) {
        this.target_ = typeof target === "string" ? document.getElementById(target) : target;
      }
    };
    Control_default = Control;
  }
});

export {
  MapEventType_default,
  init_MapEventType,
  Control_default,
  Control_exports,
  init_Control
};
//# sourceMappingURL=chunk-E3GYGNNG.js.map
